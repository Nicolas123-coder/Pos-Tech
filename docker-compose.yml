networks:
  monitoring:
  app-network:

volumes:
  contacts_api:
  sqlserver_data:
  prometheus_data:
  grafana_data:
  kong_data:
  konga_data:

services:

  kong-database:
    image: postgres:13
    container_name: kong-database
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  kong-migrations:
    image: kong:3.4
    container_name: kong-migrations
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
    command: kong migrations bootstrap
    networks:
      - app-network
    restart: on-failure

  kong:
      image: kong:3.4
      container_name: kong
      depends_on:
        kong-database:
          condition: service_healthy
        kong-migrations:
          condition: service_completed_successfully
      environment:
        KONG_DATABASE: postgres
        KONG_PG_HOST: kong-database
        KONG_PG_USER: kong
        KONG_PG_PASSWORD: kong
        KONG_PG_DATABASE: kong
        KONG_PROXY_ACCESS_LOG: /dev/stdout
        KONG_ADMIN_ACCESS_LOG: /dev/stdout
        KONG_PROXY_ERROR_LOG: /dev/stderr
        KONG_ADMIN_ERROR_LOG: /dev/stderr
        KONG_ADMIN_LISTEN: 0.0.0.0:8001
        KONG_ADMIN_GUI_URL: http://localhost:8002
      ports:
        - "8000:8000"
        - "8001:8001"
        - "8443:8443"
        - "8444:8444"
      networks:
        - app-network
      healthcheck:
        test: ["CMD", "kong", "health"]
        interval: 10s
        timeout: 5s
        retries: 5
      restart: unless-stopped

  konga:
      image: pantsel/konga:latest
      container_name: konga
      environment:
        - NODE_ENV=development
        - TOKEN_SECRET=ahq8U2ee8ris3ocuTh5vohg6sieGhNahch4yail0iGh0tha7shaoL7ooc5ahM8sh
      ports:
        - "1337:1337"
      volumes:
        - konga_data:/app/kongadata
      networks:
        - app-network
      depends_on:
        - kong
      restart: unless-stopped

  kong-config:
      image: kong/deck:latest
      container_name: kong-config
      depends_on:
        kong:
          condition: service_healthy
      volumes:
        - ./Pos-Tech/Gateway/kong.yml:/kong.yml
      command: gateway sync /kong.yml --kong-addr http://kong:8001
      networks:
        - app-network
      restart: on-failure

  contacts-api:
    build:
      context: ./Pos-Tech
      dockerfile: API/Dockerfile
    container_name: contacts-api
    ports:
      - "5000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sql-server;Database=ContactsDb;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=True
      - Prometheus__MetricsPath=/metrics
      - ASPNETCORE_URLS=http://+:80
      - APPLY_MIGRATIONS=false
    volumes:
      - ./Pos-Tech:/src/Pos-Tech
      - contacts_api:/app
    depends_on:
      sql-server:
        condition: service_healthy
    networks:
      - app-network
      - monitoring
    restart: unless-stopped

  sql-server:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sql-server
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=YourStrong@Passw0rd
      - MSSQL_DATABASE=ContactsDb
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pgrep", "sqlservr"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - app-network
    restart: unless-stopped

  rabbitmq-exporter:
    image: kbudde/rabbitmq-exporter
    container_name: rabbitmq-exporter
    environment:
      RABBIT_URL: "http://rabbitmq:15672"
      RABBIT_USER: "guest"
      RABBIT_PASSWORD: "guest"
      PUBLISH_PORT: "9419"
    ports:
      - "9419:9419"
    depends_on:
      - rabbitmq
    networks:
      - app-network
      - monitoring
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./Pos-Tech/Monitoring/Prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - contacts-api

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./Pos-Tech/Monitoring/Grafana/provisioning:/etc/grafana/provisioning
      - ./Pos-Tech/Monitoring/Grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus

  consumidor:
      build:
        context: ./Pos-Tech
        dockerfile: Consumer/Dockerfile
      container_name: consumidor
      ports:
        - "8081:80"
      environment:
        - ASPNETCORE_ENVIRONMENT=Development
        - ConnectionStrings__DefaultConnection=Server=sql-server;Database=ContactsDb;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=True
      depends_on:
        - rabbitmq
      networks:
        - app-network
        - monitoring
      restart: unless-stopped

  get-contacts-fn:
    build:
      context: ./Pos-Tech
      dockerfile: GetContacts/Dockerfile
    container_name: get-contacts-fn
    ports:
      - "7071:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sql-server;Database=ContactsDb;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=True
    depends_on:
      sql-server:
        condition: service_healthy
    networks:
      - app-network
