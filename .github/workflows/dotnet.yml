name: Build and Deploy to Kubernetes

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      
      - name: Restore dependencies
        run: dotnet restore ./Pos-Tech/Pos-Tech.sln
      
      - name: Build
        run: dotnet build ./Pos-Tech/Pos-Tech.sln --no-restore
      
      - name: Test
        run: dotnet test ./Pos-Tech/Tests/Tests.csproj --no-build --verbosity normal

  build-and-push-images:
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Extract metadata (tags, labels) for API
        id: meta-api
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/contacts-api
          tags: |
            type=sha,format=short
            type=ref,event=branch
            latest
      
      - name: Build and push API image
        uses: docker/build-push-action@v4
        with:
          context: ./Pos-Tech
          file: ./Pos-Tech/API/Dockerfile
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for Consumer
        id: meta-consumer
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/contacts-consumer
          tags: |
            type=sha,format=short
            type=ref,event=branch
            latest
      
      - name: Build and push Consumer image
        uses: docker/build-push-action@v4
        with:
          context: ./Pos-Tech
          file: ./Pos-Tech/Consumer/Dockerfile
          push: true
          tags: ${{ steps.meta-consumer.outputs.tags }}
          labels: ${{ steps.meta-consumer.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for GetContacts
        id: meta-getcontacts
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/get-contacts
          tags: |
            type=sha,format=short
            type=ref,event=branch
            latest
      
      - name: Build and push GetContacts image
        uses: docker/build-push-action@v4
        with:
          context: ./Pos-Tech
          file: ./Pos-Tech/GetContacts/Dockerfile
          push: true
          tags: ${{ steps.meta-getcontacts.outputs.tags }}
          labels: ${{ steps.meta-getcontacts.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  kubernetes-demo:
    needs: build-and-push-images
    if: success() || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Kind cluster
        uses: helm/kind-action@v1.7.0
        with:
          cluster_name: tech-challenge
          config: |
            kind: Cluster
            apiVersion: kind.x-k8s.io/v1alpha4
            nodes:
            - role: control-plane
              kubeadmConfigPatches:
              - |
                kind: InitConfiguration
                nodeRegistration:
                  kubeletExtraArgs:
                    node-labels: "ingress-ready=true"
              extraPortMappings:
              - containerPort: 80
                hostPort: 80
                protocol: TCP
              - containerPort: 443
                hostPort: 443
                protocol: TCP
      
      - name: Login to GitHub Container Registry in Kind
        run: |
          echo "${{ env.REGISTRY_PASSWORD }}" | docker login ${{ env.REGISTRY }} -u ${{ env.REGISTRY_USERNAME }} --password-stdin
      
      - name: Setup Kubernetes tools
        run: |
          kubectl cluster-info
          kubectl get nodes
          echo "✅ Cluster Kubernetes criado com sucesso!"
      
      - name: Create namespaces
        run: |
          echo "📦 Criando namespaces..."
          kubectl apply -f kubernetes/namespaces/namespace.yml
          kubectl get namespaces
      
      - name: Deploy ConfigMaps and Secrets
        run: |
          echo "📦 Criando ConfigMaps e Secrets..."
          kubectl apply -f kubernetes/configs/configmaps.yml || echo "Ignorando erro em configmaps"
          kubectl apply -f kubernetes/configs/secrets.yml || echo "Ignorando erro em secrets"
      
      - name: Deploy Persistent Volumes (local)
        run: |
          echo "📦 Criando volumes persistentes..."
          sed -i 's|storageClassName: manual|storageClassName: standard|g' kubernetes/storage/persistent-volumes.yml || true
          kubectl apply -f kubernetes/storage/persistent-volumes.yml || echo "Ignorando erro em volumes"
      
      - name: Deploy Database and Messaging
        run: |
          echo "📦 Implantando SQL Server..."
          kubectl apply -f kubernetes/database/sqlserver.yml || echo "Ignorando erro no SQL Server"
          
          echo "📦 Implantando RabbitMQ..."
          kubectl apply -f kubernetes/messaging/rabbitmq.yml || echo "Ignorando erro no RabbitMQ"
          
          kubectl get pods --all-namespaces
      
      - name: Deploy Monitoring
        run: |
          echo "📦 Implantando Prometheus e Grafana..."
          kubectl apply -f kubernetes/monitoring/prometheus-grafana.yml || echo "Ignorando erro no monitoramento"
      
      - name: Deploy Kong Gateway
        run: |
          echo "📦 Implantando Kong Gateway..."
          kubectl apply -f kubernetes/gateway/kong.yml || echo "Ignorando erro no Kong"
      
      - name: Update Kubernetes manifests with image tags
        run: |
          REGISTRY="${{ env.REGISTRY }}/${{ github.repository }}"
          IMAGE_TAG="sha-$(git rev-parse --short HEAD)"
          
          echo "🔄 Atualizando manifestos com tags das imagens..."
          sed -i "s|\${REGISTRY_NAME}|$REGISTRY|g" kubernetes/apps/contacts-api.yml || echo "Arquivo não encontrado ou erro ao substituir"
          sed -i "s|\${IMAGE_TAG}|$IMAGE_TAG|g" kubernetes/apps/contacts-api.yml || echo "Arquivo não encontrado ou erro ao substituir"
          
          sed -i "s|\${REGISTRY_NAME}|$REGISTRY|g" kubernetes/apps/consumer.yml || echo "Arquivo não encontrado ou erro ao substituir"
          sed -i "s|\${IMAGE_TAG}|$IMAGE_TAG|g" kubernetes/apps/consumer.yml || echo "Arquivo não encontrado ou erro ao substituir"
          
          sed -i "s|\${REGISTRY_NAME}|$REGISTRY|g" kubernetes/apps/get-contacts.yml || echo "Arquivo não encontrado ou erro ao substituir"
          sed -i "s|\${IMAGE_TAG}|$IMAGE_TAG|g" kubernetes/apps/get-contacts.yml || echo "Arquivo não encontrado ou erro ao substituir"
      
      - name: Deploy Application Services
        run: |
          echo "📦 Implantando aplicações..."
          kubectl apply -f kubernetes/apps/contacts-api.yml || echo "Ignorando erro na API"
          kubectl apply -f kubernetes/apps/consumer.yml || echo "Ignorando erro no Consumer"
          kubectl apply -f kubernetes/apps/get-contacts.yml || echo "Ignorando erro no GetContacts"
      
      - name: Install Ingress NGINX (skipping validation)
        run: |
          echo "📦 Instalando Ingress NGINX Controller..."
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
          
          echo "⏳ Aguardando Ingress Controller iniciar..."
          sleep 30
          
          kubectl get pods -n ingress-nginx
          
          kubectl get events -n ingress-nginx
          
          echo "⚠️ Prosseguindo mesmo se o controller não estiver totalmente pronto"
      
      - name: Apply network policies (skipping ingress)
        run: |
          echo "📦 Aplicando políticas de rede..."
          kubectl apply -f kubernetes/networking/network-policies.yml || echo "Ignorando erro em network policies"
      
      - name: Install metrics server for HPA
        run: |
          echo "📦 Instalando Metrics Server para autoscaling..."
          kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
          kubectl patch deployment metrics-server -n kube-system --type=json -p='[{"op":"add","path":"/spec/template/spec/containers/0/args/-","value":"--kubelet-insecure-tls"}]'
          
          echo "⏳ Aguardando Metrics Server iniciar..."
          sleep 15
          
          kubectl get pods -n kube-system | grep metrics-server
          
          echo "⚠️ Prosseguindo mesmo se o metrics server não estiver totalmente pronto"
      
      - name: Apply scaling configuration
        run: |
          echo "📦 Aplicando configurações de autoscaling..."
          kubectl apply -f kubernetes/scaling/hpa.yml || echo "Ignorando erro em HPA"
          kubectl apply -f kubernetes/scaling/resource-quotas.yml || echo "Ignorando erro em resource quotas"
      
      - name: Demonstrate scaling (if services are available)
        run: |
          echo "🚀 Tentando demonstrar escalabilidade manual..."
          kubectl scale deployment contacts-api -n contacts-app --replicas=3 || echo "Não foi possível escalar a API"
          
          sleep 15
          
          kubectl get pods -n contacts-app || echo "Não há pods para mostrar"
      
      - name: Show final deployment status
        run: |
          echo "📊 Estado final do cluster:"
          
          echo "Namespaces:"
          kubectl get namespaces
          
          echo "Pods:"
          kubectl get pods --all-namespaces
          
          echo "Serviços:"
          kubectl get services --all-namespaces
          
          echo "Deployments:"
          kubectl get deployments --all-namespaces
          
          echo "HorizontalPodAutoscalers:"
          kubectl get hpa --all-namespaces || echo "Nenhum HPA encontrado"
          
          echo "🎉 Demonstração Kubernetes concluída!"